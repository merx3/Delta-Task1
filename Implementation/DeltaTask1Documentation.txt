Delta-Task1 Документация

Условие:

Да се състави програма, изчисляваща най-оптималния график за присъствия на стажанти в практически занятия, по зададени брой работни дни, брой работни смени на ден, продължителност на работния ден, продължителност на работна смяна,брой стажанти в работна смяна и минимален и максимален позволен брой часове на стажант.

Решение:

За решението сме използвали следните три класа:

•	Employee.java

1)Декларират се следните член-променливи на класа:

private int id = Идентификационни номера на стажанта.
private int workHours = Брой на работните часове за две седмици.
private int [] startHours = Масив със начални часове на свободното време на стажант за 14 дни.Всяка стойност се проверява дали е >=0 и <=24.
private int [] endHours = Масив със крайни часове на свободното време на стажант за 14 дни.Всяка стойност се проверява дали е >=0 и <=24.
private int [] availableHours = Масив със броя свободни часове на ден за 14 дни. Получаваме ги от разликата между endHours и startHours.
private boolean [][] availableShifts = Двумерен булев масив с размерност [14][numShifts], в който се маркира с true всяка смяна, в която стажанта може да присъства и с false, ако неможе.
private int [][] workShifts = Двумерен масив с размерност [14][numShifts], в който с номер на работно място се маркира смяна, през която стажантът ще работи на съответното работно място.

2) Конструктор Employee(int id, String filename) инициализиращ член-променливите на класа:

workHours = 0; 
Останалите се инициализират с помощта на методи в конструктора.

3) Методи:

- setDefaultWorkShifts – инициализира workShifts;
- setAvailableHoursAndAvailableShifts - инициализират се availableHours и availableShifts с начални         стойности = 0.
- readEmployeeDataFromFile(String filename) – метода за четене от файл, също инициализиращ startHours и endHours;
-writeEmployeeScheduleToFile(String filename) - метода записва позицията на смяна за съответен ден във файл;
-printSpec - помощен метод за метода writeEmployeeScheduleToFile, чрез цикъл се записват данните за съответния ден чрез индекса на масива workShifts;

4) Класът съдържа стандартни Set и Get методи за член-променливите с нужните проверки.

•	Scheduler.java

1)Декларират се следните член-променливи на класа:
private static boolean[] workdays = Булев масив за седемте дни от седмицата. По време на въвеждане на входните данни маркира избраните работните дни с true, а почивните с false.
private static int numWorkplaces = Брой работни места в една работна смяна.
private static int numEmployees = Общ брой на стажантите.
private static int numShifts = Брой на смените.
private static int workdayStart  =  Начален час на работния ден.
private static int workdayEnd = Краен час на работния ден.
private static int hoursInShift = Брой часове в една смяна.
private static int breakBetweenShifts = Почивка между смените.
private static int minWorkHours = Минимален брой работни часове на стажант за 14 дни.
private static int maxWorkHours = Максимален брой работни часове на стажант за 14 дни.
private static int [] shiftStart = Масив с размерност [numShifts] съдържащ началните часове на работните смени.
private static int[][][] occupiedWorkplace = Тримерен масив с размерност [14][numShifts][numWorkplaces], стойност 0 означава, че работното място е свободно, ако е заето мястото има стойност ID на стажанта.
private static LinkedList<Employee> employees; - Свързан списък с обектите от клас Employee.java

2)Статична инициализация на всички входни параметри;
3)Set и Get методи за всички private променливи, с нужните проверки;
4)Методи:
- arrangeHours(int day):
Създава се нов свързан списък LinkedList<Employee>employeeTemp и обектите се сортират от най-заетия към най-свободния с помощта на метода(sortEmpoyeesByFreeTimeInDay).
…
– getEmployeesCountInShift(int day, int shift):
Метод, който преброява стажантите в една смяна, проверявайки за стойности различни от 0 в тримерния масив occupiedWorkplaces[][][];

– addMoreHours(int day):
Тук другият метод addMoreHoursForShift е вкаран във for цикъл с дължина numShifts.

– addMoreHoursForShift(int day, int shift):
Този метод сравнява окупираните и максимално позволените работни места в една смяна. Ако не са окупирани всички места, намира стажанта с най-малко свободно време и пробва да го сложи на свободното място. Това продължава докато не се намери стажант, които да заеме мястото или докато не се проверят всички.

– enrollEmployee(Employee employee, int day, int shift):
В този метод се проверява, ако има останали незаети места във всички смени(occupiedWorkplaces[][][] == 0) и дали има стажанти, които биха могли да го заемат, но без вече да са записани в тази група (employee.getWorkShifts()[day][shift] == 0). Ако и двете проверки са успешни, стойността на съответната смяна в occupiedWorkplaces[][][] се отбелязва с ID на стажанта.

– dismissEmployee(Employee employee, int day,int shift):
Методът занулява смените на даден стажант в даден ден в occupiedWorkplaces[][][], когато бъде извикан, докато смените му не станат <= на максималния брой разрешени за 14 дни.

– sortEmployeesByFreeTimeInDay (LinkedList<Employee> employees, int day):
Сортира обектите от клас Employee в нов свързан списък по свободното им време за ден.
–sortEmployeesByWorkHours(LinkedList<Employee> employees):
Сортира обектите от клас Employee в нов свързан списък по броя на заетите им работни часове.
-rearrangeAveraging():
Обявяват се две помощни променливи за стажанти с най-малък и най-голям брой часове за 14 дни.
Обявяват се и две променливи отброяващи начало и край на 5000 милисекунди. В безкраен while цикъл се опитва да се прехвърлят смени на стажанта с най-малко часове взети от този с най-много, при всеки неуспешен опит индекса на текущия стажант с най-много часове се намаля с 1.Ако се намери стажант, които може да даде смяна на друг се вика метода exchangehours(). От цикъла се излиза когато втората променлива е с 5000 милисекунди > от първата. 
-exchangeHours(int indexOfRecipient, int indexOfDonor):
Този метод освобождава дадено място и го дава на стажанта с най-малко часове за две седмици.
-dismissHours():
Отнема смени на стажант, докато часовете му за две седмици не станат <= максималните позволени.

•	Main.java
...
